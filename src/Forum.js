import React, { useEffect, useRef, useState } from 'react';
import { connectWebSocket } from './webSocketService'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è WebSocket

const Forum = () => {
  const [messages, setMessages] = useState([]);
  const [nickname, setNickname] = useState('–Ø');
  const [text, setText] = useState('');
  const messageEndRef = useRef(null);
  const socket = useRef(null); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ WebSocket

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useEffect –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
  useEffect(() => {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket —ñ –ø–µ—Ä–µ–¥–∞—á–∞ callback –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    socket.current = connectWebSocket('wss://focused-community-server.onrender.com', (data) => {
      console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:', data); // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö

      if (data.type === 'history') {
        setMessages(data.messages); // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      } else if (data.type === 'new-message') {
        setMessages((prev) => [...prev, data.message]); // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      } else if (data.type === 'update-reaction') {
        setMessages((prev) =>
          prev.map((m) => (m.id === data.id ? { ...m, reaction: data.reaction } : m))
        );
      }
    });

    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ WebSocket –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∞–∂—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
    return () => {
      if (socket.current) {
        socket.current.close();
      }
    };
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const sendMessage = () => {
    if (text.trim()) {
      socket.current.send(
        JSON.stringify({
          type: 'new-message',
          text,
          nickname,
          avatar: 'üß†',
        })
      );
      setText('');
    }
  };

  // –î–æ–¥–∞—î–º–æ —Ä–µ–∞–∫—Ü—ñ—é –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const addReaction = (id, reaction) => {
    socket.current.send(
      JSON.stringify({
        type: 'reaction',
        id,
        reaction,
      })
    );
  };

  // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–Ω–∏–∑ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  useEffect(() => {
    if (messageEndRef.current) {
      messageEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  return (
    <div className="forum-wrapper">
      <div className="forum-box">
        <h1>üå± –°–ø—ñ–ª—å–Ω–æ—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</h1>
        <div className="forum-messages">
          {messages.map((msg) => (
            <div key={msg.id} className="message-card">
              <div className="message-header">
                <span className="avatar">{msg.avatar}</span>
                <strong>{msg.nickname}</strong>
              </div>
              <p>{msg.text}</p>
              <div className="reactions">
                {['‚ù§Ô∏è', 'üëç', '‚≠ê', 'ü§ó'].map((r) => (
                  <button key={r} onClick={() => addReaction(msg.id, r)}>
                    {r}
                  </button>
                ))}
                {msg.reaction && <span className="selected-reaction">{msg.reaction}</span>}
              </div>
            </div>
          ))}
          <div ref={messageEndRef} />
        </div>
        <div className="forum-inputs">
          <input
            placeholder="–¢–≤—ñ–π –Ω—ñ–∫"
            value={nickname}
            onChange={(e) => setNickname(e.target.value)}
          />
          <textarea
            placeholder="–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º–∏ –¥—É–º–∫–∞–º–∏..."
            value={text}
            onChange={(e) => setText(e.target.value)}
          />
          <button onClick={sendMessage}>üí¨ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏</button>
        </div>
      </div>
    </div>
  );
};

export default Forum;
